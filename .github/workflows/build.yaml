name: Build OpenShockClock

on:
  push:
    tags:
      - "v*"
  pull_request:
    branches: [main]
  workflow_dispatch:

jobs:
  build:
    name: Build ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: windows-latest
            output_name: OpenShockClock.exe
            asset_name: OpenShockClock-Windows.zip
          - os: ubuntu-latest
            output_name: OpenShockClock
            asset_name: OpenShockClock-Linux.zip
          - os: macos-latest
            output_name: OpenShockClock
            asset_name: OpenShockClock-MacOS.zip

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
          cache: "pip"

      - name: Install macOS dependencies
        if: matrix.os == 'macos-latest'
        run: |
          pip install pyobjc-framework-Cocoa pyobjc-framework-WebKit

      - name: Install Linux dependencies
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y libwebkit2gtk-4.1-dev libgtk-3-dev

      - name: Install Windows dependencies
        if: matrix.os == 'windows-latest'
        run: |
          pip install pywin32

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install cx_Freeze pywebview

      - name: Build with cx_Freeze
        run: |
          python setup.py build

      - name: Create ZIP archive
        run: |
          cd build
          if [ "${{ matrix.os }}" = "windows-latest" ]; then
            cd exe.win-amd64-*
            7z a ../../${{ matrix.asset_name }} *
          elif [ "${{ matrix.os }}" = "ubuntu-latest" ]; then
            cd exe.linux-x86_64-*
            zip -r ../../${{ matrix.asset_name }} *
          elif [ "${{ matrix.os }}" = "macos-latest" ]; then
            cd exe.macos*
            zip -r ../../${{ matrix.asset_name }} *
          fi

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.os }}-build
          path: ${{ matrix.asset_name }}

  create-release:
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            *-build/*.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
